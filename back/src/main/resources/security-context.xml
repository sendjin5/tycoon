<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.8.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">-->
<!--    &lt;!&ndash;-->
<!--            시큐리티이용해서 인증처리하기-->
<!--            <security:http>태그를 이용해서 인증처리할 수 있음-->
<!--         &ndash;&gt;-->
<!--    <security:http auto-config="true">-->
<!--        &lt;!&ndash;  로그인 설정하기  &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--                   id,paassword로 인증처리하기-->
<!--                   <security:form-login>태그 이용-->
<!--                    태그 속성-->
<!--                    username-parameter : id값의 name속성명을 설정-->
<!--                    password-parameter : password값의 name속성명을 설정-->
<!--                    login-page : 커스터마이징한 로그인페이지 주소를 설정-->
<!--                    default-target-url : 인증 후 연결될 기본 주소 설정 -> 이전 페이지로 이동-->
<!--                    authentication-failure-forward-url : 인증실패 후 연결될 서비스 URL(필요시)-->
<!--                    authentication-success-forward-url : 인증성공 후 연결될 서비스 URL(필요시)-->
<!--                    login-processing-url : 인증을 처리하는 url주소를 설정-->
<!--                 &ndash;&gt;-->

<!--        <security:form-login-->
<!--                password-parameter="pw"-->
<!--                username-parameter="userId"-->
<!--                login-processing-url="/loginend.do"-->
<!--                authentication-success-forward-url="/loginsuccess"-->
<!--                authentication-failure-forward-url="/loginfail"-->
<!--        />-->
<!--        &lt;!&ndash;-->

<!--                    <security:csrf disabled="true">-->
<!--                 &ndash;&gt;-->
<!--        <security:csrf disabled="true"/>-->
<!--        &lt;!&ndash;-->
<!--                    로그아웃 처리 설정-->
<!--                    <security:logout>태그를 이용-->
<!--                     logout-url : 로그아웃 처리할 url설정 -> /logout-->
<!--                     logout-success-url : 로그아웃 처리 후 실행할 서비스 URL-->
<!--                 &ndash;&gt;-->
<!--        <security:logout-->
<!--                logout-url="/logout.do"-->
<!--        />-->
<!--        &lt;!&ndash;            logout-success-url="/logoutsuccess"&ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--                    요청을 차단/허용할 url설정하기-->
<!--                    <security:intercept-url>태그를 이용-->
<!--                        pattern : 차단,허용할 url패턴-->
<!--                        access : 차단, 허용여부에 대한 설정(permitAll(), hasAnyAuthority(,))-->
<!--         &ndash;&gt;-->

<!--        <security:intercept-url pattern="/academy/login" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/resources/**" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/logoutsuccess" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/teacher/hire*" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/teacher/teainfo" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/instructor/insinfo" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/instructor/hire*" access="permitAll()"/> &lt;!&ndash; 시험용 로그인 완료되면 지워도 됨 &ndash;&gt;-->
<!--        <security:intercept-url pattern="/instructor/teacherRecruit" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/admin/main" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/admin/teacheradd" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/enroll/*" access="permitAll()"/>-->
<!--        <security:intercept-url pattern="/*" access="permitAll()"/>                     &lt;!&ndash; 시험용 2 &ndash;&gt;-->
<!--        <security:intercept-url pattern="/memo/**" access="hasAuthority('admin')"/>-->
<!--        <security:intercept-url pattern="/**" access="hasAnyAuthority('admin','user')"/>-->

<!--        &lt;!&ndash;권한이 업는 사용자가 접속했을때 error 페이지로 연결하기 &ndash;&gt;-->
<!--        <security:access-denied-handler error-page="/WEB-INF/views/common/error/runtimeerror.jsp"/>-->

<!--    </security:http>-->
<!--    &lt;!&ndash;-->
<!--            인증처리 관련 설정-->
<!--             1. 인메모리방식으로 처리하기 -> 지정된 사용자만 확인하고 인증처리하는 방식 X-->
<!--             2. DB연동해서 처리하기-->
<!--             * 패스워드 암호화 처리해야함-->
<!--             <security:authentication-provider>-->
<!--                인메모리 : <security:user-service>태그를 이용-->
<!--                DB연동 : 태그 속성인 user-service-ref="service클래스" 를 이용-->
<!--                <security:password-encoder ref="">태그 이용해서 패스워드 인코더 등록-->
<!--         &ndash;&gt;-->
<!--    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>-->
<!--    <security:authentication-manager >-->
<!--        &lt;!&ndash;        <security:authentication-provider>&ndash;&gt;-->
<!--        &lt;!&ndash;            <security:user-service>&ndash;&gt;-->
<!--        &lt;!&ndash;                <security:user name="bslove" authorities="admin" password="$2a$10$Mq4zMOKL9IgL2lJ7lS0.X.5wy8AaKA6lZjVOK7pvV.3iYLgSr6l2G"/>&ndash;&gt;-->
<!--        &lt;!&ndash;            </security:user-service>&ndash;&gt;-->
<!--        &lt;!&ndash;            <security:password-encoder ref="passwordEncoder"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        </security:authentication-provider>&ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--            UserDetailsService 인터페이스를 구현한 클래스를 선언,-->
<!--            bean 등록-->
<!--            스프링 시큐리티에서 쓸 db 인증 인터페이스를 재정의 해서 사용한다.-->
<!--        &ndash;&gt;-->
<!--        <security:authentication-provider user-service-ref="loginService">-->
<!--            <security:password-encoder ref="passwordEncoder"/>-->
<!--        </security:authentication-provider>-->

<!--    </security:authentication-manager>-->
<!--    <bean id="teacherdao" class="com.mh.ac.teacher.model.dao.TeacherDaoImpl"/>-->
<!--    <bean id="instructordao" class="com.mh.ac.instructor.model.dao.InstructorDaoImpl"/>-->
<!--    <bean id="admindao" class="com.mh.ac.admin.model.dao.AdminDaoImpl"/>-->
<!--    <bean id="loginService" class="com.mh.ac.security.model.service.SecurityLoginService">-->
<!--        <constructor-arg index="0" ref="teacherdao"/>-->
<!--        <constructor-arg index="1" ref="instructordao"/>-->
<!--        <constructor-arg index="2" ref="admindao"/>-->
<!--        <constructor-arg index="3" ref="sqlSession"/>-->
<!--    </bean>-->
<!--    <import resource="root-context.xml"/>-->



<!--</beans>-->